geom_histogram()
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram() +
geom_point()
head(pheno)
pheno$id <- rep(1, dim(pheno)[1])
pheno$id <- rep(1, dim(pheno)[1])
pheno <- as.data.frame(do.cross$pheno)
# Separate plots
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram() +
geom_point(data=pheno,aes(x=id,y=OF_distance,size=2))
pheno$id <- seq(1, dim(pheno)[1])
pheno <- as.data.frame(do.cross$pheno)
pheno$id <- seq(1, dim(pheno)[1])
# Separate plots
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram() +
geom_point(data=pheno,aes(x=id,y=OF_distance,size=2))
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram() +
geom_point(data=pheno,aes(x=OF_distance,y=id,size=2))
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_boxplot() +
geom_point()
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_boxplot()
ggplot(pheno, aes(x=OF_distance, alpha=0.25)) +
geom_boxplot()
ggplot(pheno, aes(x=OF_distance, y=id, alpha=0.25)) +
geom_boxplot()
pheno <- as.data.frame(do.cross$pheno)
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram()
pheno <- as.data.frame(do.cross$pheno)
ggplot(pheno, aes(c(OF_distance,OF_distance) alpha=0.25)) +
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram()
pheno <- as.data.frame(do.cross$pheno)
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram()
library(ggplot2)
library(reshape)
pheno <- as.data.frame(do.cross$pheno)
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram()
library(ggplot2)
library(reshape)
pheno <- as.data.frame(do.cross$pheno)
ggplot(pheno, aes(OF_distance, alpha=0.25)) +
geom_histogram()
library(ggplot2)
library(reshape)
library(GGally)
ggpairs(pheno)
library(GGally)
ggpairs(pheno[,1:3])
ggpairs(pheno[,1:10])
OF <- grep(colnames(pheno), "^OF")
OF <- grep(colnames(pheno), pattern = "^OF")
OF
colnames(pheno)
library(ggplot2)
library(reshape)
library(GGally)
pheno <- as.data.frame(do.cross$pheno)
OF <- grep(colnames(pheno), pattern = "^OF")
ggpairs(pheno[,OF])
LD <- grep(colnames(pheno), pattern = "^LD")
ggpairs(pheno[,LD])
VC <- grep(colnames(pheno), pattern = "^VC")
ggpairs(pheno[,VC])
TS <- grep(colnames(pheno), pattern = "^TS")
ggpairs(pheno[,TS])
library(ggplot2)
library(reshape)
library(GGally)
pheno <- as.data.frame(do.cross$pheno)
OF <- grep(colnames(pheno), pattern = "^OF")
ggpairs(pheno[,OF])
LD <- grep(colnames(pheno), pattern = "^LD")
ggpairs(pheno[,LD])
VC <- grep(colnames(pheno), pattern = "^VC")
ggpairs(pheno[,VC])
TS <- grep(colnames(pheno), pattern = "^TS")
ggpairs(pheno[,TS])
probs <- calc_genoprob(do.cross, error_prob=0.002, map_function="c-f", cores=n_cores)
n_cores <- 8
probs <- calc_genoprob(do.cross, error_prob=0.002, map_function="c-f", cores=n_cores)
image(1:500, 1:ncol(probs[[1]]), t(probs[[1]][1,8:1,1:500]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 1")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:500, 1:ncol(probs[[1]]), t(probs[[1]][1,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 1")
image(1:261, 1:ncol(probs[[1]]), t(probs[[1]][1,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 1")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
ncol(probs[[1]])
image(1:261, 1:ncol(aprobs[[1]]), t(aprobs[[1]][1,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 1")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
aprobs <- genoprob_to_alleleprob(probs, cores=n_cores)
image(1:261, 1:ncol(aprobs[[1]]), t(aprobs[[1]][1,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 1")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:261, 1:ncol(aprobs[[1]]), t(aprobs[[1]][2,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 2")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:261, 1:ncol(aprobs[[1]]), t(aprobs[[1]][3,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 2")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:261, 1:ncol(aprobs[[1]]), t(aprobs[[1]][1:3,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 2")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:261, 1:ncol(aprobs[[1]]), t(aprobs[[1]][260,8:1,1:261]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 2")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
aprobs[[1]]
image(1:448, 1:ncol(aprobs[[1]]), t(aprobs[[1]][260,8:1,1:448]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 2")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:448, 1:ncol(aprobs[[1]]), t(aprobs[[1]][1,8:1,1:448]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 2")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:448, 1:ncol(aprobs[[1]]), t(aprobs[[1]][1,8:1,1:448]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 1")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
image(1:448, 1:ncol(aprobs[[1]]), t(aprobs[[1]][10,8:1,1:448]), breaks = 0:100/100,
col = grey(99:0/100), axes = F, xlab = "Markers", ylab = "Founders",
main = "Founder Allele Contributions for Sample 10")
abline(h = 0:8 + 0.5, col = "grey70")
usr = par("usr")
rect(usr[1], usr[3], usr[2], usr[4])
axis(side = 1, at = 0:5 * 100, labels = 0:5 * 100)
axis(side = 2, at = 1:8, labels = LETTERS[8:1], las = 1, tick = F)
covar <- do.cross$covar
head(covar)
head(pheno)
pheno <- as.data.frame(do.cross$pheno)
covar <- as.data.frame(do.cross$covar)
LD <- grep(colnames(pheno), pattern = "^LD")
LD.pheno <- cbind.data.frame(pheno[,LD], covar)
head(LD.pheno)
ggplot(LD.pheno, aes(sex)) + geom_boxplot()
ggplot(LD.pheno, aes(Sex)) + geom_boxplot()
ggplot(LD.pheno, aes(Sex,LD_light_pct)) + geom_boxplot()
ggplot(LD.pheno, aes(Sex,LD_light_pct)) + geom_boxplot() + geom_point()
ggplot(LD.pheno, aes(Sex,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(ngen,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Cohort,LD_light_pct)) + geom_boxplot() + geom_jitter()
LD.pheno$ngen <- paste("G0", LD.pheno$ngen, sep="")
head(LD.pheno$ngen)
View(LD.pheno)
addcovar = model.matrix(~ngen, data = LD.pheno)[,-1]
addcovar
LD.pheno$ngen <- as.factor(LD.pheno$ngen)
addcovar = model.matrix(~ngen, data = LD.pheno)[,-1]
head(addcovar)
index = which(colnames(pheno) == "LD_light_pct")
qtl = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
kinship <- calc_kinship(aprobs, "loco", cores=n_cores)
index = which(colnames(pheno) == "LD_light_pct")
qtl = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot(qtl)
plot_scan1(x = qtl, map = do.cross$pmap, main = "% time in light")
index
pheno[,index, drop = FALSE]
pheno$LD_light_pct_trans <- sqrt(pheno$LD_light_pct)
index = which(colnames(pheno) == "LD_light_pct_trans")
qtl = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl, map = do.cross$pmap, main = "% time in light")
plot_scan1(x = qtl, map = do.cross$gmap, main = "% time in light")
pheno$LD_light_pct_log <- log(pheno$LD_light_pct)
index = which(colnames(pheno) == "LD_light_pct_log")
imndex
index
qtl = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl, map = do.cross$gmap, main = "% time in light")
colnames(do.cross$covar)
pheno <- as.data.frame(do.cross$pheno)
covar <- as.data.frame(do.cross$covar)
LD <- grep(colnames(pheno), pattern = "^LD")
LD.pheno <- cbind.data.frame(pheno[,LD], covar)
LD.pheno$ngen <- paste("G0", LD.pheno$ngen, sep="")
LD.pheno$ngen <- as.factor(LD.pheno$ngen)
pheno$LD_light_pct_log <- log(pheno$LD_light_pct)
pheno$LD_light_pct_sqrt <- sqrt(pheno$LD_light_pct)
ggplot(LD.pheno, aes(Sex,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(ngen,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Cohort,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Group,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Subgroup,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(coat_color,LD_light_pct)) + geom_boxplot() + geom_jitter()
dev.off()
ggplot(LD.pheno, aes(Sex,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(ngen,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Cohort,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Group,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(Subgroup,LD_light_pct)) + geom_boxplot() + geom_jitter()
ggplot(LD.pheno, aes(coat_color,LD_light_pct)) + geom_boxplot() + geom_jitter()
addcovar = model.matrix(~ngen+Group, data = LD.pheno)[,-1]
addcovar
index = which(colnames(pheno) == "LD_light_pct_log")
qtl.log = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
index = which(colnames(pheno) == "LD_light_pct_trans")
qtl.sqrt = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
index
index = which(colnames(pheno) == "LD_light_pct_sqrt")
qtl.sqrt = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
index = which(colnames(pheno) == "LD_light_pct")
qtl = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
colnames(pheno)
index = which(colnames(pheno) == "TS_frequency_climbing")
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
index = which(colnames(pheno) == "TS_frequency_climbing")
pheno = log(pheno[,index, drop = FALSE])
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno, kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
index = which(colnames(pheno) == "TS_frequency_climbing")
pheno = sqrt(pheno[,index, drop = FALSE])
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno, kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
index = which(colnames(pheno) == "TS_frequency_climbing")
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
index = which(colnames(pheno) == "TS_frequency_climbing")
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
index = which(colnames(pheno) == "TS_frequency_climbing")
imndex
index
index = which(colnames(pheno) == "TS_frequency_climbing")
index
colnames(pheno)
pheno <- as.data.frame(do.cross$pheno)
colnames(pheno)
pheno <- as.data.frame(do.cross$pheno)
covar <- as.data.frame(do.cross$covar)
TS <- grep(colnames(pheno), pattern = "^TS")
TS.pheno <- cbind.data.frame(pheno[,LD], covar)
TS.pheno$ngen <- paste("G0", TS.pheno$ngen, sep="")
TS.pheno$ngen <- as.factor(TS.pheno$ngen)
ggplot(TS.pheno, aes(Sex,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
TS <- grep(colnames(pheno), pattern = "^TS")
TS.pheno <- cbind.data.frame(pheno[,TS], covar)
TS.pheno$ngen <- paste("G0", TS.pheno$ngen, sep="")
TS.pheno$ngen <- as.factor(TS.pheno$ngen)
ggplot(TS.pheno, aes(Sex,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
ggplot(TS.pheno, aes(ngen,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
ggplot(TS.pheno, aes(Cohort,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
ggplot(TS.pheno, aes(Group,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
ggplot(TS.pheno, aes(Subgroup,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
ggplot(TS.pheno, aes(coat_color,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
index = which(colnames(pheno) == "TS_frequency_climbing")
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
perms = scan1perm(genoprobs = probs, pheno = pheno[,index, drop = FALSE], addcovar = addcovar, n_perm = 500)
perms = scan1perm(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], addcovar = addcovar, n_perm = 500)
perms = scan1perm(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], addcovar = addcovar, n_perm = 100)
plot(x = qtl, map = map,  main = "Climbing frequency")
plot(x = qtl, map = do.cross$gmap,  main = "Climbing frequency")
thr = summary(perms)
abline(h = thr, col = "red", lwd = 2)
plot(x = qtl.climb, map = do.cross$gmap,  main = "Climbing frequency")
thr = summary(perms)
abline(h = thr, col = "red", lwd = 2)
thr
summary(perms, alpha = 0.05)
summary(perms, alpha = 0.10)
summary(perms, alpha = 0.63)
plot(x = qtl.climb, map = do.cross$gmap,  main = "Climbing frequency")
thr95 = summary(perms, alpha = 0.05)
thr90 = summary(perms, alpha = 0.10)
abline(h = c(thr95,thr90), col = "red", lwd = 2)
plot(x = qtl.climb, map = do.cross$gmap,  main = "Climbing frequency")
thr95 = summary(perms, alpha = 0.05)
thr90 = summary(perms, alpha = 0.10)
abline(h = c(thr95), col = "red", lwd = 2)
abline(h = c(thr90), col = "red", lwd = 1)
colnames(pheno)
pheno <- as.data.frame(do.cross$pheno)
covar <- as.data.frame(do.cross$covar)
#TS <- grep(colnames(pheno), pattern = "^TS")
#TS.pheno <- cbind.data.frame(pheno[,TS], covar)
#TS.pheno$ngen <- paste("G0", TS.pheno$ngen, sep="")
#TS.pheno$ngen <- as.factor(TS.pheno$ngen)
#ggplot(TS.pheno, aes(Sex,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
#ggplot(TS.pheno, aes(ngen,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
#ggplot(TS.pheno, aes(Cohort,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
#ggplot(TS.pheno, aes(Group,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
#ggplot(TS.pheno, aes(Subgroup,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
#ggplot(TS.pheno, aes(coat_color,TS_frequency_climbing)) + geom_boxplot() + geom_jitter()
HP <- grep(colnames(pheno), pattern = "^HP")
HP.pheno <- cbind.data.frame(pheno[,HP], covar)
HP.pheno$ngen <- paste("G0", HP.pheno$ngen, sep="")
HP.pheno$ngen <- as.factor(HP.pheno$ngen)
ggplot(HP.pheno, aes(Sex,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(ngen,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(Cohort,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(Group,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(Subgroup,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(coat_color,HP_latency)) + geom_boxplot() + geom_jitter()
head(HP.pheno)
pheno[,HP]
HP <- grep(colnames(pheno), pattern = "^HP")
HP.pheno <- cbind.data.frame(pheno[,HP], covar)
colnames(HP.pheno)[1] <- "HP_latency"
HP.pheno$ngen <- paste("G0", HP.pheno$ngen, sep="")
HP.pheno$ngen <- as.factor(HP.pheno$ngen)
ggplot(HP.pheno, aes(Sex,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(ngen,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(Cohort,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(Group,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(Subgroup,HP_latency)) + geom_boxplot() + geom_jitter()
ggplot(HP.pheno, aes(coat_color,HP_latency)) + geom_boxplot() + geom_jitter()
index = which(colnames(pheno) == "HP_latency")
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
plot_scan1(x = qtl.climb, map = do.cross$gmap, main = "Climbing frequency")
find_peaks(scan1_output = qtl.climb, map = map, threshold = thr90, prob = 0.95)
find_peaks(scan1_output = qtl.climb, map = do.cross$pmap, threshold = thr90, prob = 0.95)
thr90
find_peaks(scan1_output = qtl.climb, map = do.cross$pmap, threshold = 7.44, prob = 0.95)
find_peaks(scan1_output = qtl.climb, map = do.cross$pmap,prob = 0.95)
index = which(colnames(pheno) == "TS_frequency_climbing")
qtl.climb = scan1(genoprobs = aprobs, pheno = pheno[,index, drop = FALSE], kinship = kinship, addcovar = addcovar)
find_peaks(scan1_output = qtl.climb, map = do.cross$pmap, threshold = thr90, prob = 0.95)
98.15 - 95.67
chr = 8
coef08 = scan1blup(genoprobs = aprobs[,chr], pheno = pheno[,index, drop = FALSE], kinship = kinship[[chr]], addcovar = addcovar)
plot_coefCC(x = coef08, map = do.cross$pmap, scan1_output = qtl.climb, main = "Climbing frequency")
chr = 6
coef06 = scan1blup(genoprobs = aprobs[,chr], pheno = pheno[,index, drop = FALSE], kinship = kinship[[chr]], addcovar = addcovar)
plot_coefCC(x = coef08, map = do.cross$pmap, scan1_output = qtl.climb, main = "Climbing frequency")
plot_coefCC(x = coef06, map = do.cross$pmap, scan1_output = qtl.climb, main = "Climbing frequency")
plot_snpasso
?plot_snpasso
chr = 6
start = 95
end = 99
query_func = create_variant_query_func("../data/cc_variants.sqlite")
library(qtl2)
library(qtl2convert)
library(qtl2db)
library(qtl2plot)
query_func = create_variant_query_func("../data/cc_variants.sqlite")
plot_snpasso(scan1output = assoc$lod, snpinfo = assoc$snpinfo, main = "Proportion of Micro-nucleated Bone Marrow Reticulocytes")
chr = 6
start = 95
end = 99
query_func = create_variant_query_func("../data/cc_variants.sqlite")
assoc = scan1snps(genoprobs = aprobs[,chr], map = do.cross$pmap, pheno = pheno[,index,drop = FALSE], kinship = kinship, addcovar = addcovar, query_func = query_func, chr = chr, start = start, end = end, keep_all_snps = TRUE)
plot_snpasso(scan1output = assoc$lod, snpinfo = assoc$snpinfo, main = "Proportion of Micro-nucleated Bone Marrow Reticulocytes")
query_genes = create_gene_query_func(dbfile = "../data/mouse_genes.sqlite", filter = "source='MGI'")
genes = query_genes(chr, start, end)
head(genes)
plot_snpasso(assoc$lod, assoc$snpinfo, main = "Proportion of Micro-nucleated Bone Marrow Reticulocytes", genes = genes)
```{r plot_assoc2,warning=FALSE, error=FALSE, echo=FALSE}
plot_genoprob(apors, map=do.cross$gmap, chr=19)
plot_genoprob(aprobs, map=do.cross$gmap, chr=19)
plot_genoprob(aprobs, map=do.cross$gmap, chr=``)
plot_genoprob(aprobs, map=do.cross$gmap, chr=``)
plot_genoprob(aprobs, map=do.cross$gmap, chr=1)
```{r sample1, echo=FALSE}
plot_genoprob(aprobs, map=do.cross$gmap, chr=1)
plot_genoprob(aprobs, map=do.cross$gmap, chr=2)
```
```{r sample10, echo=FALSE}
plot_genoprob(aprobs, map=do.cross$gmap, chr=1, ind = 10)
plot_genoprob(aprobs, map=do.cross$gmap, chr=2, ind = 10)
```
plot_genoprob(aprobs, map=do.cross$gmap, chr=1)
plot_genoprob(aprobs, map=do.cross$gmap, chr=2)
plot_genoprob(aprobs, map=do.cross$gmap, chr=1)
plot_genoprob(aprobs, map=do.cross$gmap, chr=2)
plot_genoprob(aprobs, map=do.cross$gmap, chr=1, ind = 10)
plot_genoprob(aprobs, map=do.cross$gmap, chr=2, ind = 10)
plot_genoprob(aprobs, map=do.cross$gmap, chr=2, ind = 10)
plot_onegeno(geno=do.cross$geno, map=do.cross$gmap)
plot_onegeno(geno=do.cross$geno, map=do.cross$gmap, col = CCcolors)
?plot_pxg
?plot_onegeno()
plot_onegeno(geno=do.cross$geno, map=do.cross$gmap, col = CCcolors, ind = 100)
plot_onegeno(geno=do.cross$geno, map=do.cross$gmap, col = CCcolors, ind = 10)
plot_onegeno(geno=do.cross$geno, map=do.cross$gmap, col = CCorigcolors, ind = 10)
CCcolors
CCorigcolors
str(o.cross$geno)
str(do.cross$geno)
head(do.cross$geno[[1]])
head(do.cross$geno[[1]][,1])
(do.cross$geno[[1]][,1])
str(do.cross)
plot_genoprob(probs, map=do.cross$gmap, chr=1)
plot_genoprob(probs, map=do.cross$gmap, chr=1)
plot_onegeno(geno=aprobs, map=do.cross$gmap, col = CCorigcolors, ind = 10)
install.packages("qtl2", repos="http://rqtl.org/qtl2cran")
install.packages("qtl2", repos = "http://rqtl.org/qtl2cran")
library(qtl2)
library(qtl2convert)
library(qtl2db)
library(qtl2plot)
do.cross <- read_cross2("../data/DO_Recla/recla.json")
summary(do.cross)
library(ggplot2)
library(reshape)
library(GGally)
pheno <- as.data.frame(do.cross$pheno)
n_cores <- 8
probs <- calc_genoprob(do.cross, error_prob=0.002, map_function="c-f", cores=n_cores)
aprobs <- genoprob_to_alleleprob(probs, cores=n_cores)
kinship <- calc_kinship(aprobs, "overall", cores=n_cores)
image(1:nrow(kinship[[1]]), 1:ncol(kinship[[1]]), kinship[[1]][,ncol(kinship[[1]]):1], xlab = "Samples",
ylab = "Samples", yaxt = "n", main = "Kinship between samples",
breaks = 0:100/100, col = heat.colors(length(0:100) - 1))
dim(kinship)
image(1:nrow(kinship), 1:ncol(kinship), kinship[,ncol(kinship):1], xlab = "Samples",
ylab = "Samples", yaxt = "n", main = "Kinship between samples",
breaks = 0:100/100, col = heat.colors(length(0:100) - 1))
?plot_genes
qtl2plot::plot_snpasso()
?qtl2plot::plot_snpasso()
?qtl2::plot_snpasso()
qtl2::plot_snpasso(assoc$lod, assoc$snpinfo, main = "Climbing frequency", genes=genes)
chr = 6
start = 95
end = 99
query_func = create_variant_query_func("../data/cc_variants.sqlite")
assoc = scan1snps(genoprobs = aprobs[,chr], map = do.cross$pmap, pheno = pheno[,index,drop = FALSE], kinship = kinship, addcovar = addcovar, query_func = query_func, chr = chr, start = start, end = end, keep_all_snps = TRUE)
index = which(colnames(pheno) == "TS_frequency_climbing")
chr = 6
start = 95
end = 99
query_func = create_variant_query_func("../data/cc_variants.sqlite")
assoc = scan1snps(genoprobs = aprobs[,chr], map = do.cross$pmap, pheno = pheno[,index,drop = FALSE], kinship = kinship, addcovar = addcovar, query_func = query_func, chr = chr, start = start, end = end, keep_all_snps = TRUE)
addcovar = model.matrix(~ngen+Group, data = TS.pheno)[,-1]
library(inputenc)
install.packages("inputenc")
BiocInstaller::biocLite("inputenc")
library(latexpdf)
BiocInstaller::biocLite("latexpdf")
knit_with_parameters('~/CS-SA/CSNA/ShortCourse_2018/04_QTL_Mapping/DO/code/logan_doqtl.Rmd')
library(pdftex)
install.packages("pdftex")
BiocInstaller::biocLite("pdftex")
library(qtl2)
library(qtl2convert)
library(qtl2db)
chr = 6
start = 95
end = 99
query_func = create_variant_query_func("../data/cc_variants.sqlite")
query_genes = create_gene_query_func(dbfile = "../data/mouse_genes.sqlite", filter = "source='MGI'")
genes = query_genes(chr, start, end)
View(genes)
